# Leka - LekaOS
# Copyright 2021 APF France handicap
# SPDX-License-Identifier: Apache-2.0

name: Code Analysis

on:
  push:
    branches:
      - master
      - develop

  pull_request:
    types: [opened, synchronize, reopened]

env:
  CC: /usr/bin/gcc
  CXX: /usr/bin/g++

  CLICOLOR_FORCE: true # ninja

  CCACHE_DIR: /home/runner/work/ccache
  CCACHE_COMPRESS: true
  CCACHE_COMPRESSLEVEL: 6

  ARM_TOOLCHAIN_FILENAME: "gcc-arm-none-eabi-*-x86_64-linux.tar.bz2"
  ARM_TOOLCHAIN_EXTRACT_DIRECTORY: "gcc-arm-none-eabi-*"

jobs:
  compare_bin_map_files:
    name: Compare .bin & .map files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      #
      # Mark: - Install ARM GCC Toolchain
      #

      - name: Create ARM GCC Toolchain env variables
        run: |
          echo "ARM_TOOLCHAIN_URL=$(cat .gcc_arm_none_eabi_url)" >> $GITHUB_ENV

      - name: Cache ARM GCC Toolchain
        id: cache_arm_toolchain
        uses: actions/cache@v2
        with:
          path: ~/gcc-arm-none-eabi
          key: ${{ runner.os }}-global_cache-arm_toolchain-${{ hashFiles('.gcc_arm_none_eabi_url') }}

      - name: Install ARM GCC Toolchain
        if: steps.cache_arm_toolchain.outputs.cache-hit != 'true'
        run: |
          wget ${{ env.ARM_TOOLCHAIN_URL }}
          tar -xjf ${{ env.ARM_TOOLCHAIN_FILENAME }} && rm -rf ${{ env.ARM_TOOLCHAIN_FILENAME }}
          mv ${{ env.ARM_TOOLCHAIN_EXTRACT_DIRECTORY }} ~/gcc-arm-none-eabi

      - name: Add ARM GCC Toolchain to path
        run: |
          tmp_home=$(echo ~)
          echo "$tmp_home/gcc-arm-none-eabi/bin" >> $GITHUB_PATH

      - name: Test ARM GCC Toolchain
        run: |
          ls -al ~/gcc-arm-none-eabi/bin
          arm-none-eabi-gcc -v

      #
      # Mark: - Install misc. tools
      #

      - name: Install tools
        run: |
          sudo apt-get install -y --no-install-recommends ninja-build ccache

      #
      # Mark: - Download `extern` dependencies
      #

      - name: Cache extern dependencies
        id: cache_extern_dependencies
        uses: actions/cache@v2
        with:
          path: |
            extern/mbed-os
            extern/mcuboot
          key: ${{ runner.os }}-global_cache-extern_dependencies-${{ hashFiles('.mbed_version', '.mbed_git_url', '.mcuboot_version') }}

      - name: Pull extern dependencies
        if: steps.cache_extern_dependencies.outputs.cache-hit != 'true'
        run: |
          make mbed_curl
          make mcuboot_clone

      - name: Cache ccache
        id: cache_ccache
        uses: actions/cache@v2
        with:
          path: ${{ env.CCACHE_DIR}}
          key: ${{ runner.os }}-cache-code_analysis-compare_bin_map_files-ccache-${{ steps.cache_variables.outputs.date }}
          restore-keys: |
            ${{ runner.os }}-cache-code_analysis-compare_bin_map_files-ccache-

      #
      # Mark: - Install python/pip dependencies
      #

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Cache pip dependencies
        id: cache_pip_dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            ${{ env.pythonLocation }}
          key: ${{ runner.os }}-global_cache-pip_dependencies-${{ env.pythonLocation }}-${{ hashFiles('extern/mbed-os/requirements.txt', '.mbed_version') }}

      - name: Install pip packages
        run: |
          pip install --upgrade --upgrade-strategy eager mbed-cli
          pip install --upgrade --upgrade-strategy eager -r ./extern/mbed-os/requirements.txt

      - name: Test pip packages
        run: |
          pip list -v
          mbed-cli --help

      #
      # Mark: - Prepare, config, compile
      #

      - name: Create base & head sha variables
        id: create_sha_variables
        run: |
          git checkout ${{ github.base_ref }}
          echo "BASE_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          git checkout ${{ github.head_ref }}
          echo "HEAD_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Create mbed/toolchain version variables
        id: create_mbed_version_variables
        run: |
          git checkout ${{ github.base_ref }}
          echo "BASE_MBED_VERSION=$(cat .mbed_version)" >> $GITHUB_ENV
          git checkout ${{ github.head_ref }}
          echo "HEAD_MBED_VERSION=$(cat .mbed_version)" >> $GITHUB_ENV
          echo "TOOLCHAIN_VERSION=$(arm-none-eabi-gcc --version | grep -Po '(?<=gcc \().*(?= \(re)' | sed 's/)/ -/g'" >> $GITHUB_ENV

      - name: Create temporary directories
        run: |
          mkdir -p _build_tmp/${{ env.BASE_SHA }}
          mkdir -p _build_tmp/${{ env.HEAD_SHA }}

      - name: Compile base branch
        run: |
          git checkout ${{ github.base_ref }}
          make deep_clean
          if [[ "$BASE_MBED_VERSION" != "$HEAD_MBED_VERSION" ]]; then
            make mbed_curl VERSION=${{ env.BASE_MBED_VERSION }}
          fi
          make config
          make

      - name: Move ${{ github.base_ref }}:${{ env.BASE_SHA }} bin & map files to temporary directory
        run: |
          find _build ! -path '*CMakeFiles*' -name "*.bin" -print0 | xargs -0 -I {} cp {} _build_tmp/${{ env.BASE_SHA }}
          find _build ! -path '*CMakeFiles*' -name "*.map" -print0 | xargs -0 -I {} cp {} _build_tmp/${{ env.BASE_SHA }}

      - name: Compile pr branch
        run: |
          git checkout ${{ github.head_ref }}
          make deep_clean
          if [[ "$BASE_MBED_VERSION" != "$HEAD_MBED_VERSION" ]]; then
            make mbed_curl VERSION=${{ env.HEAD_MBED_VERSION }}
          fi
          make config
          make

      - name: Move ${{ github.head_ref }}:${{ env.HEAD_SHA }} bin & map files to temporary directory
        run: |
          find _build ! -path '*CMakeFiles*' -name "*.bin" -print0 | xargs -0 -I {} cp {} _build_tmp/${{ env.HEAD_SHA }}
          find _build ! -path '*CMakeFiles*' -name "*.map" -print0 | xargs -0 -I {} cp {} _build_tmp/${{ env.HEAD_SHA }}

      - name: Compare bin files
        shell: bash
        run: |
          shopt -s xpg_echo

          echo 'STATUS_DIFF_OUTPUT<<EOF_STATUS_DIFF_OUTPUT' >> $GITHUB_ENV

          base_targets=($(echo $(find _build_tmp/${{ env.BASE_SHA }} -name '*.bin' -execdir basename -s '.bin' {} +) | tr ' ' '\n' | sort -du | tr '\n' ' '))
          head_targets=($(echo $(find _build_tmp/${{ env.HEAD_SHA }} -name '*.bin' -execdir basename -s '.bin' {} +) | tr ' ' '\n' | sort -du | tr '\n' ' '))
          all_targets=($(echo "${base_targets[@]} ${head_targets[@]}" | tr ' ' '\n' | sort -du | tr '\n' ' '))

          echo "Set added/deleted targets"
          added_targets=()
          deleted_targets=()
          for target in "${all_targets[@]}"; do
            if [[ ${base_targets[*]} =~ "$target" ]] && ! [[ ${head_targets[*]} =~ "$target" ]]; then
              deleted_targets+=($target)
            elif ! [[ ${base_targets[*]} =~ "$target" ]] && [[ ${head_targets[*]} =~ "$target" ]]; then
              added_targets+=($target)
            fi
          done

          echo "all:     ${all_targets[*]}"
          echo "base:    ${base_targets[*]}"
          echo "head:    ${head_targets[*]}"
          echo "added:   ${added_targets[*]}"
          echo "deleted: ${deleted_targets[*]}"

          echo "| Target | Status | .bin | .map | Static RAM (base/head) | Static RAM Δ | Total Flash (base/head) | Total Flash Δ |" >> $GITHUB_ENV
          echo "|-------|:------:|:------:|:------:|:------:|:------:|:------:|:------:|" >> $GITHUB_ENV

          for target in "${all_targets[@]}"; do
            target_name=$target

            echo -n "| $target_name " >> $GITHUB_ENV

            if [[ ${added_targets[*]} =~ "$target" ]]; then
              echo -n "| :sparkles: | - | - | - | - |\n" >> $GITHUB_ENV
            elif [[ ${deleted_targets[*]} =~ "$target" ]]; then
              echo -n "| :coffin: | - | - | - | - |\n" >> $GITHUB_ENV
            else
              echo -n "| :heavy_check_mark: " >> $GITHUB_ENV

              if ! output=$(diff _build_tmp/${{ env.BASE_SHA }}/$target_name.bin _build_tmp/${{ env.HEAD_SHA }}/$target_name.bin 2>/dev/null); then
                echo -n "| :x: " >> $GITHUB_ENV
              else
                echo -n "| :white_check_mark: " >> $GITHUB_ENV
              fi

              python3 extern/mbed-os/tools/memap.py -t GCC_ARM _build_tmp/${{ env.BASE_SHA }}/$target_name.map > _build_tmp/${{ env.BASE_SHA }}/$target_name.txt
              python3 extern/mbed-os/tools/memap.py -t GCC_ARM _build_tmp/${{ env.HEAD_SHA }}/$target_name.map > _build_tmp/${{ env.HEAD_SHA }}/$target_name.txt

              if ! output=$(diff _build_tmp/${{ env.BASE_SHA }}/$target_name.txt _build_tmp/${{ env.HEAD_SHA }}/$target_name.txt 2>/dev/null); then
                echo -n "| :x: " >> $GITHUB_ENV
              else
                echo -n "| :white_check_mark: " >> $GITHUB_ENV
              fi

              base_ram=$(grep -Po '(?<=\(data \+ bss\):\s)[[:digit:]]*' _build_tmp/${{ env.BASE_SHA }}/$target_name.txt)
              head_ram=$(grep -Po '(?<=\(data \+ bss\):\s)[[:digit:]]*' _build_tmp/${{ env.HEAD_SHA }}/$target_name.txt)
              diff_ram=$(($head_ram - $base_ram))

              if [ $diff_ram -lt 0 ]; then
                  diff_ram=":chart_with_downwards_trend: $diff_ram"
              elif [ $diff_ram -gt 0 ]; then
                  diff_ram=":chart_with_upwards_trend: $diff_ram"
              else
                  diff_ram="ø"
              fi

              base_flash=$(grep -Po '(?<=\(text \+ data\):\s)[[:digit:]]*' _build_tmp/${{ env.BASE_SHA }}/$target_name.txt)
              head_flash=$(grep -Po '(?<=\(text \+ data\):\s)[[:digit:]]*' _build_tmp/${{ env.HEAD_SHA }}/$target_name.txt)
              diff_flash=$(($head_flash - $base_flash))

              if [ $diff_flash -lt 0 ]; then
                  diff_flash=":chart_with_downwards_trend:  $diff_flash"
              elif [ $diff_flash -gt 0 ]; then
                  diff_flash=":chart_with_upwards_trend: $diff_flash"
              else
                  diff_flash="ø"
              fi

              echo -n "| $base_ram / $head_ram | $diff_ram | $base_flash / $head_flash | $diff_flash " >> $GITHUB_ENV

              echo -n "|\n" >> $GITHUB_ENV
            fi

          done

          echo 'EOF_STATUS_DIFF_OUTPUT' >> $GITHUB_ENV

      - name: Compare maps files
        shell: bash
        run: |
          shopt -s xpg_echo

          echo 'MAP_DIFF_OUTPUT<<EOF_MAP_DIFF_OUTPUT' >> $GITHUB_ENV

          base_targets=($(echo $(find _build_tmp/${{ env.BASE_SHA }} -name '*.bin' -execdir basename -s '.bin' {} +) | tr ' ' '\n' | sort -du | tr '\n' ' '))
          head_targets=($(echo $(find _build_tmp/${{ env.HEAD_SHA }} -name '*.bin' -execdir basename -s '.bin' {} +) | tr ' ' '\n' | sort -du | tr '\n' ' '))
          all_targets=($(echo "${base_targets[@]} ${head_targets[@]}" | tr ' ' '\n' | sort -du | tr '\n' ' '))

          echo "Set added/deleted targets"
          added_targets=()
          deleted_targets=()
          for target in "${all_targets[@]}"; do
            if [[ ${base_targets[*]} =~ "$target" ]] && ! [[ ${head_targets[*]} =~ "$target" ]]; then
              deleted_targets+=($target)
            elif ! [[ ${base_targets[*]} =~ "$target" ]] && [[ ${head_targets[*]} =~ "$target" ]]; then
              added_targets+=($target)
            fi
          done

          echo "all:     ${all_targets[*]}"
          echo "base:    ${base_targets[*]}"
          echo "head:    ${head_targets[*]}"
          echo "added:   ${added_targets[*]}"
          echo "deleted: ${deleted_targets[*]}"

          no_map_diff=true

          for target in "${all_targets[@]}"; do
            target_name=$target

            if ! [[ ${added_targets[*]} =~ "$target" ]] && ! [[ ${deleted_targets[*]} =~ "$target" ]]; then
              echo "$target not deleted nor new, running diff"

              if ! diff_output=$(diff --unified=150 _build_tmp/${{ env.BASE_SHA }}/$target_name.txt _build_tmp/${{ env.HEAD_SHA }}/$target_name.txt); then

                echo $diff_output

                echo "<details>" >> $GITHUB_ENV
                echo "<summary><b><code>$target_name</code></b> (click to expand)</summary>" >> $GITHUB_ENV
                echo "" >> $GITHUB_ENV

                echo "\`\`\`diff" >> $GITHUB_ENV
                echo "$diff_output" >> $GITHUB_ENV
                echo "\`\`\`" >> $GITHUB_ENV

                echo "" >> $GITHUB_ENV
                echo "</details>" >> $GITHUB_ENV
                echo "" >> $GITHUB_ENV

                no_map_diff=false
              fi
            fi
          done

          if $no_map_diff; then
              echo "No differenes where found in map files." >> $GITHUB_ENV
          fi

          echo 'EOF_MAP_DIFF_OUTPUT' >> $GITHUB_ENV

      - name: Publish differences
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: analysis_bin_map_files
          recreate: true
          message: |
            #  .map & .bin files analysis report

            ## Versions :bookmark:

            - toolchain: `${{ env.TOOLCHAIN_VERSION }}`
            - base: `${{ github.base_ref }}:${{ env.BASE_SHA }}` with `${{ env.BASE_MBED_VERSION }}`
            - head: `${{ github.head_ref }}:${{ env.HEAD_SHA }}` with `${{ env.HEAD_MBED_VERSION }}`

            ## Summary :memo:

            <details>
            <summary>Click to show summary</summary>

            - :heavy_check_mark: - existing target
            - :sparkles: - new target
            - :coffin: - deleted target
            - :white_check_mark: - files are the same
            - :x: - files are different

            ${{ env.STATUS_DIFF_OUTPUT }}

            </details>

            ## Map files diff output :world_map:

            <details>
            <summary>Click to show diff list</summary>

            ${{ env.MAP_DIFF_OUTPUT }}

            </details>
