# Code Analysis

name: Code Analysis

on:
  push:
    branches:
      - master
      - develop

  pull_request:
    types: [opened, synchronize, reopened]

env:
  CC: /usr/bin/gcc
  CXX: /usr/bin/g++

  CLICOLOR_FORCE: true # ninja

  CCACHE_DIR: /home/runner/work/ccache
  CCACHE_COMPRESS: true
  CCACHE_COMPRESSLEVEL: 6

  ARM_TOOLCHAIN_URL: "https://developer.arm.com/-/media/Files/downloads/gnu-rm/10-2020q4/gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2"
  ARM_TOOLCHAIN_FILENAME: "gcc-arm-none-eabi-*-x86_64-linux.tar.bz2"
  ARM_TOOLCHAIN_EXTRACT_DIRECTORY: "gcc-arm-none-eabi-*"

  SONARCLOUD_CLI_URL: "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472.zip"
  SONARCLOUD_CLI_FILENAME: "sonar-scanner-cli-*.zip"
  SONARCLOUD_CLI_EXTRACT_DIRECTORY: "sonar-scanner-*"

  SONARCLOUD_BUILD_WRAPPER_URL: "https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip"
  SONARCLOUD_BUILD_WRAPPER_FILENAME: "build-wrapper-linux-x86.zip"
  SONARCLOUD_BUILD_WRAPPER_EXTRACT_DIRECTORY: "build-wrapper-linux-x86"

jobs:
  sonarcloud:
    name: sonarcloud
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      #
      # Mark: - Create cache variables
      #

      - name: Create cache variables
        id: cache_variables
        shell: bash
        run: |
          echo "::set-output name=date::$(date +%s)"

          sha=($(echo -n ${{ env.ARM_TOOLCHAIN_URL }} | sha1sum ))
          echo "::set-output name=arm_toolchain_url_sha::$sha"

      #
      # Mark: - Install ARM GCC Toolchain
      #

      - name: Cache ARM GCC Toolchain
        id: cache_arm_toolchain
        uses: actions/cache@v2
        with:
          path: ~/gcc-arm-none-eabi
          key: ${{ runner.os }}-global_cache-arm_toolchain-${{ steps.cache_variables.outputs.arm_toolchain_url_sha }}

      - name: Install ARM GCC Toolchain
        if: steps.cache_arm_toolchain.outputs.cache-hit != 'true'
        run: |
          wget ${{ env.ARM_TOOLCHAIN_URL }}
          tar -xjf ${{ env.ARM_TOOLCHAIN_FILENAME }} && rm -rf ${{ env.ARM_TOOLCHAIN_FILENAME }}
          mv ${{ env.ARM_TOOLCHAIN_EXTRACT_DIRECTORY }} ~/gcc-arm-none-eabi

      - name: Add ARM GCC Toolchain to path
        run: |
          echo "~/gcc-arm-none-eabi/bin" >> $GITHUB_PATH

      - name: Test ARM GCC Toolchain
        run: |
          ls -al ~/gcc-arm-none-eabi/bin
          arm-none-eabi-gcc -v

      #
      # Mark: - Install SonarCloud tools
      #

      - name: Download SonarCloud build wrapper
        run: |
          wget ${{ env.SONARCLOUD_BUILD_WRAPPER_URL }}
          unzip ${{ env.SONARCLOUD_BUILD_WRAPPER_FILENAME }} && rm -rf ${{ env.SONARCLOUD_BUILD_WRAPPER_FILENAME }}
          mv ${{ env.SONARCLOUD_BUILD_WRAPPER_EXTRACT_DIRECTORY }} ~/build-wrapper
          echo "~/build-wrapper" >> $GITHUB_PATH

      - name: Download sonar-scanner
        run: |
          wget ${{ env.SONARCLOUD_CLI_URL }}
          unzip ${{ env.SONARCLOUD_CLI_FILENAME }} && rm -rf ${{ env.SONARCLOUD_CLI_FILENAME }}
          mv ${{ env.SONARCLOUD_CLI_EXTRACT_DIRECTORY }} ~/sonar-scanner
          echo "~/sonar-scanner/bin" >> $GITHUB_PATH

      #
      # Mark: - Install misc. tools
      #

      - name: Install tools
        run: |
          sudo apt-get install -y --no-install-recommends ninja-build ccache lcov gcovr

      #
      # Mark: - Download `extern` dependencies & ccache
      #

      - name: Cache extern dependencies
        id: cache_extern_dependencies
        uses: actions/cache@v2
        with:
          path: |
            extern/mbed-os
            extern/mcuboot
          key: ${{ runner.os }}-global_cache-extern_dependencies-${{ hashFiles('.mbed_version', '.mcuboot_version') }}

      - name: Pull extern dependencies
        if: steps.cache_extern_dependencies.outputs.cache-hit != 'true'
        run: |
          make mbed_curl
          make mcuboot_clone

      - name: Cache ccache
        id: cache_ccache
        uses: actions/cache@v2
        with:
          path: ${{ env.CCACHE_DIR}}
          key: ${{ runner.os }}-cache-code_analysis-sonarcloud-ccache-${{ steps.cache_variables.outputs.date }}
          restore-keys: |
            ${{ runner.os }}-cache-code_analysis-sonarcloud-ccache-

      #
      # Mark: - Install python/pip dependencies
      #

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Cache pip dependencies
        id: cache_pip_dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            ${{ env.pythonLocation }}
          key: ${{ runner.os }}-global_cache-pip_dependencies-${{ env.pythonLocation }}-${{ hashFiles('extern/mbed-os/requirements.txt', '.mbed_version') }}

      - name: Install pip packages
        run: |
          pip install --upgrade --upgrade-strategy eager mbed-cli
          pip install --upgrade --upgrade-strategy eager -r ./extern/mbed-os/requirements.txt

      - name: Test pip packages
        run: |
          pip list -v
          mbed-cli --help

      #
      # Mark: - Build & analyze
      #

      - name: Ccache pre build
        run: |
          make ccache_prebuild

      - name: Config, build LekaOS & al.
        run: |
          make config config_tools
          build-wrapper-linux-x86-64 --out-dir bw-output make

      - name: Ccache post build
        run: |
          make ccache_postbuild
          ccache -z

      - name: Ccache pre unit tests
        run: |
          make ccache_prebuild

      - name: Config, build & run unit tests
        run: |
          make config_unit_tests
          make unit_tests
          make coverage_sonarqube

      - name: Ccache post unit tests
        run: |
          make ccache_postbuild
          ccache -z

      - name: Upload compilation database
        uses: actions/upload-artifact@v2
        with:
          name: compile_commands.json
          path: ./_build_cmake_tools/compile_commands.json

      - name: Run sonar-scanner
        run: |
          sonar-scanner -X -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  clang_tidy:
    name: clang-tidy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      #
      # Mark: - Install ARM GCC Toolchain
      #

      - name: Cache ARM GCC Toolchain
        id: cache_arm_toolchain
        uses: actions/cache@v2
        with:
          path: ~/gcc-arm-none-eabi
          key: ${{ runner.os }}-global_cache-arm_toolchain-${{ steps.cache_variables.outputs.arm_toolchain_url_sha }}

      - name: Install ARM GCC Toolchain
        if: steps.cache_arm_toolchain.outputs.cache-hit != 'true'
        run: |
          wget ${{ env.ARM_TOOLCHAIN_URL }}
          tar -xjf ${{ env.ARM_TOOLCHAIN_FILENAME }} && rm -rf ${{ env.ARM_TOOLCHAIN_FILENAME }}
          mv ${{ env.ARM_TOOLCHAIN_EXTRACT_DIRECTORY }} ~/gcc-arm-none-eabi

      - name: Add ARM GCC Toolchain to path
        run: |
          echo "~/gcc-arm-none-eabi/bin" >> $GITHUB_PATH

      - name: Test ARM GCC Toolchain
        run: |
          ls -al ~/gcc-arm-none-eabi/bin
          arm-none-eabi-gcc -v

      #
      # Mark: - Install clang-tidy
      #

      - name: Install clang-tidy 12
        run: |
          sudo apt-add-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-12 main"
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
          sudo apt update -y
          sudo apt install -y --no-install-recommends clang-tidy-12
          clang-tidy-12 --version

      #
      # Mark: - Install misc. tools
      #

      - name: Install tools
        run: |
          sudo apt-get install -y --no-install-recommends ninja-build

      #
      # Mark: - Download `extern` dependencies & ccache
      #

      - name: Cache extern dependencies
        id: cache_extern_dependencies
        uses: actions/cache@v2
        with:
          path: |
            extern/mbed-os
            extern/mcuboot
          key: ${{ runner.os }}-global_cache-extern_dependencies-${{ hashFiles('.mbed_version', '.mcuboot_version') }}

      - name: Pull extern dependencies
        if: steps.cache_extern_dependencies.outputs.cache-hit != 'true'
        run: |
          make mbed_curl
          make mcuboot_clone

      #
      # Mark: - Install python/pip dependencies
      #

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Cache pip dependencies
        id: cache_pip_dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            ${{ env.pythonLocation }}
          key: ${{ runner.os }}-global_cache-pip_dependencies-${{ env.pythonLocation }}-${{ hashFiles('extern/mbed-os/requirements.txt', '.mbed_version') }}

      - name: Install pip packages
        run: |
          pip install --upgrade --upgrade-strategy eager mbed-cli
          pip install --upgrade --upgrade-strategy eager -r ./extern/mbed-os/requirements.txt

      - name: Test pip packages
        run: |
          pip list -v
          mbed-cli --help

      #
      # Mark: - Analysze
      #

      - name: Generate compile_commands.json
        run: |
          make config_tools

      - name: Get modified files
        id: modified_files
        uses: Ana06/get-changed-files@v1.2
        with:
          format: "space-delimited"
          filter: "*"

      - name: Run clang-tidy
        run: |
          echo ${{ steps.modified_files.outputs.added }}           \
               ${{ steps.modified_files.outputs.modified }}        \
               ${{ steps.modified_files.outputs.added_modified }}  \
               | xargs -n1 \
               | grep -E -v "_test" \
               | grep -E    "\.h$|\.cpp$" \
               | xargs --no-run-if-empty clang-tidy-12 -p=. --quiet
