# CI Workflow

name: Unit Tests

on:
  push:
    branches:
      - develop
      - master

  pull_request:
    branches:
      - develop
      - "feature/**"
      - "bugfix/**"

jobs:
  clang:
    name: Clang
    runs-on: ubuntu-latest

    env:
      CC: /usr/bin/clang
      CXX: /usr/bin/clang++
      CCACHE_DIR: /home/ccache

    steps:
      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(date +%s)"
        shell: bash

      - name: Install tools
        run: |
          sudo apt-get install -y ninja-build ccache lcov

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Cache ccache
        id: cache_cccache
        uses: actions/cache@v2
        with:
          path: /home/ccache
          key: ${{ runner.os }}-unit_tests-clang-cache-cccache-${{ steps.get-date.outputs.date }}
          restore-keys: |
            ${{ runner.os }}-unit_tests-clang-cache-cccache-

      - name: Cache Mbed OS
        id: cache_mbed_os
        uses: actions/cache@v2
        with:
          path: extern/mbed-os
          key: ${{ runner.os }}-cache-mbed_os-${{ hashFiles('extern/mbed-os/platform/include/platform/mbed_version.h', '.mbed_version') }}

      - name: Curl Mbed OS
        if: steps.cache_mbed_os.outputs.cache-hit != 'true'
        run: |
          make mbed_curl

      - name: Config build system
        run: |
          make config_unit_tests

      - name: Build & run unit tests
        run: |
          make ut

      - name: Generate lcov code coverage
        run: |
          make coverage_lcov

      - name: Upload Codecov code coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          bash <(curl -s https://codecov.io/bash) -f ${{github.workspace}}/_build_unit_tests/_coverage/coverage.info || echo "Codecov did not collect coverage reports"

  gcc:
    name: GCC
    runs-on: ubuntu-latest

    env:
      CC: /usr/bin/gcc
      CXX: /usr/bin/g++
      CCACHE_DIR: /home/ccache

    steps:
      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(date +%s)"
        shell: bash

      - name: Install tools
        run: |
          sudo apt-get install -y ninja-build ccache lcov

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Cache ccache
        id: cache_cccache
        uses: actions/cache@v2
        with:
          path: /home/ccache
          key: ${{ runner.os }}-unit_tests-gcc-cache-cccache-${{ steps.get-date.outputs.date }}
          restore-keys: |
            ${{ runner.os }}-unit_tests-gcc-cache-cccache-

      - name: Cache Mbed OS
        id: cache_mbed_os
        uses: actions/cache@v2
        with:
          path: extern/mbed-os
          key: ${{ runner.os }}-cache-mbed_os-${{ hashFiles('extern/mbed-os/platform/include/platform/mbed_version.h', '.mbed_version') }}

      - name: Curl Mbed OS
        if: steps.cache_mbed_os.outputs.cache-hit != 'true'
        run: |
          make mbed_curl

      - name: Config build system
        run: |
          make config_unit_tests

      - name: Build & run unit tests
        run: |
          make ut

      - name: Generate lcov code coverage
        run: |
          make coverage_lcov

      - name: Upload Codecov code coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          bash <(curl -s https://codecov.io/bash) -f ${{github.workspace}}/_build_unit_tests/_coverage/coverage.info || echo "Codecov did not collect coverage reports"
