# Leka - LekaOS
# Copyright 2023 APF France handicap
# SPDX-License-Identifier: Apache-2.0

name: "Get os/firmware version"
description: ""

inputs:
  firmware_hex_path:
    description: "Path to Firmware hex file"
    required: true

  os_bin_path:
    description: "Path to LekaOS bin file"
    required: true

runs:
  using: "composite"
  steps:
    - name: Get version from firmware hex
      id: get_version_from_firmware_hex
      shell: bash
      run: |
        python ${{ github.action_path }}/get_version_from_firmware_hex.py ${{ inputs.firmware_hex_path }}

    - name: Get version from OS bin
      id: get_version_from_os_bin
      shell: bash
      run: |
        python ${{ github.action_path }}/get_version_from_os_bin.py ${{ inputs.os_bin_path }}

    - name: Compare firmware version with firmware file
      id: compare_firmware_version_with_firmware_file
      shell: bash
      run: |
        python ${{ github.action_path }}/compare_with_file_name.py ${{ inputs.firmware_hex_path }} ${{ env.FIRMWARE_VERSION_FILE }}

    - name: Compare OS version with OS file
      id: compare_os_version_with_os_file
      shell: bash
      run: |
        python ${{ github.action_path }}/compare_with_file_name.py ${{ inputs.os_bin_path }} ${{ env.OS_VERSION_FILE }}

    - name: Compare versions from files with os_version
      id: compare_versions_from_files_with_os_version
      shell: bash
      run: |
        python ${{ github.action_path }}/compare_with_os_version.py config/os_version ${{ env.FIRMWARE_VERSION_FILE }} ${{ env.OS_VERSION_FILE }}

    - name: Generate version comparison report
      id: generate_version_comparison_report
      shell: bash
      run: |
        ${{ github.action_path }}/generate_report.sh

    - name: Publish version
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: publish_version
        message: |
          # :bookmark: Version comparison

          ${{ env.VERSION_COMPARISON_OUTPUT }}

    - name: Check versions are all identical
      id: check_versions_are_all_identical
      shell: bash
      run: |
        ${{ github.action_path }}/check_versions_are_all_identical.sh
