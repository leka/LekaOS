# Leka - LekaOS
# Copyright 2021 APF France handicap
# SPDX-License-Identifier: Apache-2.0

name: "CI Setup"
description: ""

inputs:
  mbed_os_version:
    description: "Mbed OS version: 'base_version' or 'head_version'"
    required: true
  ccache_key:
    description: "action/cache name for ccache"
    required: true
    default: "Linux-ccache-"
  ccache_restore_keys:
    description: "action/cache name for ccache"
    required: true
    default: "Linux-ccache-"

runs:
  using: "composite"
  steps:
    #
    # Mark: - Setup env
    #

    - name: Setup ENV variables
      id: setup_env_variables
      shell: bash
      run: ${{ github.action_path }}/setup_env.sh
      env:
        BASE_REF: ${{ github.event.pull_request.base.ref }}
        HEAD_REF: ${{ github.head_ref }}

    #
    # Mark: - Checkout dependencies
    #

    - name: Checkout mbed-os - base version
      if: ${{ inputs.mbed_os_version == 'base_version' }}
      uses: actions/checkout@v4
      with:
        repository: leka/mbed-os
        ref: ${{ env.BASE_MBED_VERSION }}
        path: extern/mbed-os

    - name: Checkout mbed-os - head version
      if: ${{ inputs.mbed_os_version == 'head_version' }}
      uses: actions/checkout@v4
      with:
        repository: leka/mbed-os
        ref: ${{ env.HEAD_MBED_VERSION }}
        path: extern/mbed-os

    - name: Checkout mcuboot
      uses: actions/checkout@v4
      with:
        repository: mcu-tools/mcuboot
        ref: ${{ env.HEAD_MCUBOOT_VERSION }}
        path: extern/mcuboot

    - name: Symlink deps files
      shell: bash
      run: |
        make mbed_symlink_files
        make mcuboot_symlink_files

    #
    # Mark: - ARM GCC Toolchain
    #

    - name: Cache ARM GCC Toolchain
      id: global_cache-arm_gnu_toolchain
      uses: actions/cache@v4
      with:
        path: ${{ env.RUNNER_HOME }}/arm-gnu-toolchain
        key: ${{ runner.os }}-global_cache-arm_gnu_toolchain-${{ hashFiles('config/arm_gnu_toolchain_url') }}

    - name: Install ARM GCC Toolchain
      if: steps.global_cache-arm_gnu_toolchain.outputs.cache-hit != 'true'
      shell: bash
      run: |
        wget -q ${{ env.ARM_GNU_TOOLCHAIN_URL }} -O ${{ env.ARM_GNU_TOOLCHAIN_ARCHIVE_FILENAME }}
        mkdir -p ${{ env.ARM_GNU_TOOLCHAIN_EXTRACT_DIRECTORY }}
        tar -xf ${{ env.ARM_GNU_TOOLCHAIN_ARCHIVE_FILENAME }} -C ${{ env.ARM_GNU_TOOLCHAIN_EXTRACT_DIRECTORY }} --strip-components=1
        rm -rf ${{ env.ARM_GNU_TOOLCHAIN_ARCHIVE_FILENAME }}
        mv ${{ env.ARM_GNU_TOOLCHAIN_EXTRACT_DIRECTORY }} ${{ env.RUNNER_HOME }}/arm-gnu-toolchain

    - name: Add ARM GCC Toolchain to path
      shell: bash
      run: |
        echo "${{ env.RUNNER_HOME }}/arm-gnu-toolchain/bin" >> $GITHUB_PATH

    - name: Test ARM GCC Toolchain
      shell: bash
      run: |
        ls -al ${{ env.RUNNER_HOME }}/arm-gnu-toolchain/bin
        arm-none-eabi-gcc -v

    - name: Add toolchain version to env
      shell: bash
      run: |
        TOOLCHAIN_VERSION=$(arm-none-eabi-gcc --version | grep -Po '(?<=gcc \().*' | sed 's/))/)/g')
        echo "TOOLCHAIN_VERSION=$TOOLCHAIN_VERSION" >> $GITHUB_ENV

    #
    # Mark: - Misc. tools
    #

    - name: Install tools
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends ninja-build ccache lcov gcovr zsh

    - name: Cache ccache
      id: global_cache-ccache
      uses: actions/cache@v4
      with:
        path: ${{ env.CCACHE_DIR}}
        key: ${{ inputs.ccache_key }}-(${{ env.CACHE_NOW_TIME }}) # TODO(@ladislas): separate env from setup
        restore-keys: ${{ inputs.ccache_restore_keys }}

    #
    # Mark: - Python/pip
    #

    - name: Cache pip dependencies
      id: global_cache-pip_dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.RUNNER_HOME }}/.cache/pip
          ${{ env.pythonLocation }}
        key: ${{ runner.os }}-global_cache-pip_dependencies-${{ hashFiles('config/mbed_version') }}
        restore-keys: |
          ${{ runner.os }}-global_cache-pip_dependencies-

    - name: Install pip packages
      shell: bash
      run: |
        BREAK_SYSTEM_PACKAGES=""
        if [[ $ImageOS == "ubuntu24" ]]; then
          BREAK_SYSTEM_PACKAGES="--break-system-packages"
        fi
        echo "ImageOS: $ImageOS"
        echo "BREAK_SYSTEM_PACKAGES: $BREAK_SYSTEM_PACKAGES"
        pip install --upgrade --upgrade-strategy eager -r ./requirements.txt $BREAK_SYSTEM_PACKAGES
        pip install --upgrade --upgrade-strategy eager -r ./tools/config/mbed_requirements.txt $BREAK_SYSTEM_PACKAGES
        pip install --upgrade --upgrade-strategy eager -r ./extern/mcuboot/scripts/requirements.txt $BREAK_SYSTEM_PACKAGES

    - name: Test pip packages
      shell: bash
      run: |
        pip list -v
        mbed-cli --help
        mbed-tools --help
        imgtool --help
